start[mod_ty]: a=stmt* ENDMARKER { Module(a, NULL, p->arena) }
stmt[stmt_ty]: compound_stmt | simple_stmt
compound_stmt[stmt_ty]: pass_stmt | if_stmt

pass_stmt[stmt_ty]: a='pass' NEWLINE { _Py_Pass(EXTRA) }

if_stmt[stmt_ty]:
    | 'if' c=expression ':' t=suite e=[else_clause] { _Py_If(c, t, e, EXTRA) }
else_clause[asdl_seq*]:
    | 'elif' c=expression ':' t=suite e=[else_clause] { singleton_seq(p, _Py_If(c, t, e, EXTRA)) }
    | 'else' ':' s=suite { s }

suite[asdl_seq*]:
    | a=simple_stmt { singleton_seq(p, a) }
    | NEWLINE INDENT b=stmt+ DEDENT { b }

simple_stmt[stmt_ty]: a=expr_stmt NEWLINE { a }

expr_stmt[stmt_ty]: a=expression { _Py_Expr(a, EXTRA) }

expression[expr_ty]:
    | l=expression '+' r=term { _Py_BinOp(l, Add, r, EXTRA) }
    | l=expression '-' r=term { _Py_BinOp(l, Sub, r, EXTRA) }
    | term
term[expr_ty]:
    | l=term '*' r=factor { _Py_BinOp(l, Mult, r, EXTRA) }
    | l=term '/' r=factor { _Py_BinOp(l, Div, r, EXTRA) }
    | factor
factor[expr_ty]:
    | l=primary '**' r=factor { _Py_BinOp(l, Pow, r, EXTRA) }
    | primary
primary[expr_ty]:
    | f=primary '(' e=expression ')' { _Py_Call(f, singleton_seq(p, e), NULL, EXTRA) }
    | atom
atom[expr_ty]:
    | '(' e=expression ')' { e }
    | NAME
    | NUMBER
    | STRING
