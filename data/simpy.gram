# Simplified grammar for Python

start: [statements] ENDMARKER
statements: statement+

statement:  compound_stmt | simple_stmt
simple_stmt: small_stmt (';' small_stmt)* NEWLINE
# NOTE: assignment MUST precede expression, else the parser will get stuck;
# but it must follow all others, else reserved words will match a simple NAME.
small_stmt: return_stmt | import_stmt | 'pass' | raise_stmt | yield_stmt | assert_stmt | del_stmt | assignment | expression
compound_stmt: if_stmt | while_stmt | for_stmt | with_stmt | try_stmt | function_def | class_def

assignment: target ':' expression ['=' expression] | (star_targets '=')+ expressions | target augassign expression
augassign: ('+=' | '-=' | '*=' | '@=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=' | '**=' | '//=')

yield_stmt: yield_expr

assert_stmt: 'assert' expression [',' expression]

del_stmt: 'del' targets  # TODO: exclude *target

import_stmt: import_name | import_from
import_name: 'import' dotted_as_names
# note below: the ('.' | '...') is necessary because '...' is tokenized as ELLIPSIS
import_from: ('from' (('.' | '...')* !'import' dotted_name | ('.' | '...')+)
              'import' ('*' | '(' import_as_names ')' | import_as_names))
import_as_name: NAME ['as' NAME]
dotted_as_name: dotted_name ['as' NAME]
import_as_names: import_as_name (',' import_as_name)* [',']
dotted_as_names: dotted_as_name (',' dotted_as_name)*
dotted_name: NAME ('.' NAME)*

if_stmt: 'if' full_expression ':' block elif_block* [else_block]
elif_block: 'elif' full_expression ':' block
else_block: 'else' ':' block

while_stmt: 'while' full_expression ':' block [else_block]

for_stmt: [ASYNC] 'for' star_targets 'in' expressions ':' block [else_block]

with_stmt: [ASYNC] 'with' expression ['as' target] ':' block

try_stmt: try_block finally_block | try_block except_block+ [else_block] [finally_block]
try_block: 'try' ':' block
except_block: 'except' [expression ['as' target]] ':' block
finally_block: 'finally' ':' block

return_stmt: 'return' [expressions]

raise_stmt: 'raise' [expression ['from' expression]]

function_def: [decorators] [ASYNC] 'def' NAME '(' [parameters] ')' ['->' expression] ':' block

parameters: (slash_without_default [',' plain_names] [',' names_with_default] [',' [star_etc]]
            | slash_with_default [',' names_with_default] [',' [star_etc]]
            | plain_names [',' names_with_default] [',' [star_etc]]
            | names_with_default [',' [star_etc]]
            | star_etc
            )
star_etc: ('*' NAME [':' annotation] (',' plain_name ['=' expression])* [',' '**' NAME] [',']
          | '*' (',' plain_name ['=' expression])+ [',' '**' NAME] [',']
          | '**' NAME [':' annotation] [',']
          )
slash_without_default: plain_names ',' '/'
slash_with_default: [plain_names ','] names_with_default ',' '/'
names_with_default: name_with_default (',' name_with_default)*
plain_names: plain_name !'=' (',' plain_name !'=')*
name_with_default: plain_name '=' expression
plain_name: NAME [':' annotation]
annotation: expression

decorators: ('@' factor NEWLINE)+

class_def: [decorators] 'class' NAME ['(' full_expressions ')'] ':' block

block: simple_stmt | NEWLINE INDENT statements DEDENT

full_expressions: full_expression (',' full_expression)* [',']
expressions: expression (',' expression)* [',']

full_expression: NAME ':=' expression | expression
expression: lambdef | disjunction ['if' disjunction 'else' disjunction]
lambdef: 'lambda' [varargslist] ':' expression
varargslist: NAME (',' NAME)* [',']  # TODO: defaults, *args, **kwds
disjunction: conjunction ('or' conjunction)*
conjunction: comparison ('and' comparison)*
comparison: 'not'* bitwise_or (compare_op bitwise_or)*
compare_op: '<' | '<=' | '==' | '>=' | '>' | '!=' | ['not'] 'in' | 'is' ['not']

bitwise_or: bitwise_and ('|' bitwise_and)*
bitwise_and: sum ('&' sum)*

sum: term (('+' term | '-' term))*
term: factor (('*' factor | '/' factor | '//' factor | '%' factor | '@' factor))*
factor: ('+' | '-' | '~') factor | power
power: primary '**' factor | primary
primary: [AWAIT] atom ('.' NAME | '[' slices ']' | '(' [arguments] ')')*

slices: slice (',' slice)* [',']
slice: [expression] ':' [expression] | expression
atom: list | listcomp | tuple | group | genexp | set | setcomp | dict | dictcomp | NAME | STRING+ | NUMBER | '...'
list: '[' [full_expressions] ']'
listcomp: '[' expression for_if_clauses ']'
tuple: '(' [full_expression ',' [full_expressions]] ')'
group: '(' (full_expression | yield_expr) ')'
genexp: '(' expression for_if_clauses ')'
set: '{' expressions '}'
setcomp: '{' expression for_if_clauses '}'
dict: '{' [kvpairs] '}'
dictcomp: '{' kvpair for_if_clauses '}'
kvpairs: kvpair (',' kvpair)* [',']
kvpair: expression ':' expression
for_if_clauses: ('for' star_targets 'in' expression ('if' expression)*)+

yield_expr: 'yield' 'from' expression | 'yield' [expression]

arguments: expression for_if_clauses | args [',']
args: kwargs | posarg [',' args]  # Weird to make it work
kwargs: kwarg (',' kwarg)*
posarg: full_expression | '*' expression
kwarg: NAME '=' expression | '**' expression

star_targets: star_target (',' star_target)* [',']
targets: target (',' target)* [',']  # TODO: recursively disallow *target

star_target: '*' target | target
target: target '.' NAME | target '[' slices ']' | atomic_target
atomic_target: NAME | '[' targets ']' | '(' targets ')' | '(' target ')'
# TODO: target: primary '.' NAME | primary '[' slices ']'
